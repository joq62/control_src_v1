%%% -------------------------------------------------------------------
%%% @author : joqerlang
%%% @doc : ets dbase for master service to manage app info , catalog  
%%%
%%% -------------------------------------------------------------------
-module(schedule).
  

%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
%% --------------------------------------------------------------------
%% Definition
-define(Cookie,"abc").
%% --------------------------------------------------------------------


%-compile(export_all).
-export([
	 active/0,
	 missing/0,
	 depricated/0
	]).

%% ====================================================================
%% External functions
%% ====================================================================

active()->
     rpc:call(node(),db_sd,active_apps,[]).
%% --------------------------------------------------------------------
%% Function:create(ServiceId,Vsn,HostId,VmId)
%% Description: Starts vm and deploys services 
%% Returns: ok |{error,Err}
%% --------------------------------------------------------------------
missing()->
    MissingApps=deployment:missing_apps(),
    
    %% Start master nodes first and add 
    MissingAppSpecsInfo=[{AppSpec,db_app_spec:read(AppSpec)}||AppSpec<-MissingApps],
 %   io:format("MissingAppSpecsInfo ~p~n",[MissingAppSpecsInfo]),
    MissingMasters=[XAppSpec||
		       {XAppSpec,[{_AppId,_AppVsn,Type,_Directives,_Services}]}<-MissingAppSpecsInfo,
		       Type==master],
    MissingWorkers=[XAppSpec||
		       {XAppSpec,[{_AppId,_AppVsn,Type,_Directives,_Services}]}<-MissingAppSpecsInfo,
		       Type==worker],
    
    %% Start masters first   
    case MissingMasters of
	[]->
	     %% Start workers
	    case MissingWorkers of
		[]->
		    ok;
		[WorkerAppSpec|_]->
		    deployment:create_application(WorkerAppSpec);
	[MasterAppSpec|_]->
	    deployment:create_application(MasterAppSpec),
	    timer:sleep(1000),

             %% Add dbase nodes
	    {ok,BootHostId}=net:gethostname(),
	    BootVmId="master",
	    BootNode=list_to_atom(BootVmId++"@"++BootHostId),

	    MissingMastersAppSpecsInfo=db_app_spec:read(MasterAppSpec)||AppSpec<-MissingMasters],
	    Masters=[{lists:keyfind(host,1,Directives),lists:keyfind(vm_id,1,Directives)}||
			{_AppId,_AppVsn,master,Directives,_Services}<-MissingMastersAppSpecsInfo],
	    
	    io:format("Add Mnesia node ~p~n",[
					      [rpc:call(node(),dbase_lib,add_node,[list_to_atom(VmId++"@"++HostId)],2*5000)||
						  {{host,HostId},{vm_id,VmId}}<-Masters]
					     ]),
	    timer:sleep(1500)
    end,    
   
    
    {MissingMasters,MissingWorkers}.
    
    
%% --------------------------------------------------------------------
%% Function:create(ServiceId,Vsn,HostId,VmId)
%% Description: Starts vm and deploys services 
%% Returns: ok |{error,Err}
%% --------------------------------------------------------------------
depricated()->
    DepricatedApps=deployment:depricated_apps(),
 %   [spawn(fun()->
%	       deployment:delete_application(AppSpec) end)||AppSpec<-DepricatedApps],
    DepricatedApps.
    
%% -------------------------------------------------------------------
%% Function:create(ServiceId,Vsn,HostId,VmId)
%% Description: Starts vm and deploys services 
%% Returns: ok |{error,Err}
%% --------------------------------------------------------------------

